#!/bin/bash

#===============================================================================
# New Client Folder Generator - Enhanced Version
#===============================================================================
# Description: Creates organized folder structures for legal cases
# Author: Nick Wade
# Usage: ./NewClientFolder.sh
#===============================================================================

# Configuration
readonly BASE_DIR="$HOME/Documents/Projects/TestDirectory/Mwb-Work"
readonly SCRIPT_VERSION="2.0"

# Color codes for better output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Global variables
declare -g FIRST_NAME LAST_NAME CASE_TYPE SUBTYPE COURT COUNTY PARTY OFFENSE CAUSE_NO DATE
declare -g LAST_FIRST LAST CASE_PATH BASE_PATH

#===============================================================================
# Utility Functions
#===============================================================================

print_colored() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

error() { print_colored "$RED" "❌ Error: $*" >&2; }
success() { print_colored "$GREEN" "✅ $*"; }
info() { print_colored "$BLUE" "ℹ️  $*"; }
warning() { print_colored "$YELLOW" "⚠️  $*"; }

# Function to convert to Title Case
to_title_case() {
    echo "$1" | awk '{
        for (i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));
        print
    }'
}

# Function to trim whitespace from input
trim() {
    echo "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

# Function to sanitize path components (remove unsafe characters)
sanitize_path_component() {
    echo "$1" | tr -cd '[:alnum:] ._-'
}

check_directory_conflict() {
    local dir_path="$1"
    if [[ -d "$dir_path" ]]; then
        warning "Directory already exists: $dir_path"
        echo "Options:"
        echo "1) Continue anyway (merge with existing)"
        echo "2) Cancel operation"
        echo "3) Choose different path"
        while true; do
            read -p "Enter choice [1-3]: " choice
            case "$choice" in
                1) return 0 ;;
                2) return 1 ;;
                3) return 2 ;;
                *) error "Invalid choice. Please enter 1, 2, or 3." ;;
            esac
        done
    fi
    return 0
}

# Function to create directory with error handling
create_directory() {
    local dir_path="$1"
    local description="${2:-directory}"
    
    if ! mkdir -p "$dir_path" 2>/dev/null; then
        error "Failed to create $description: $dir_path"
        error "Please check permissions and disk space."
        return 1
    fi
    
    return 0
}

#===============================================================================
# Input Collection Functions
#===============================================================================

edit_inputs() {
    while true; do
        echo ""
        echo "╔══════════════════════════════════╗"
        echo "║        Confirm/Edit Fields       ║"
        echo "╚══════════════════════════════════╝"
        echo "1) Client Name:      $FIRST_NAME $LAST_NAME"
        echo "2) Case Type:        $CASE_TYPE"
        [[ -n "$SUBTYPE" ]] && echo "3) Subtype:          $SUBTYPE"
        [[ -n "$COURT" ]] && echo "4) Court:            $COURT"
        [[ -n "$COUNTY" ]] && echo "5) County:           $COUNTY"
        echo "6) Party:            $PARTY"
        echo "7) Offense:          $OFFENSE"
        echo "8) Cause Number:     $CAUSE_NO"
        echo "9) Incident Date:    $DATE"
        echo "10) Folder Path:     $CASE_PATH"
        echo "11) Continue and Create Folders"
        echo "0) Cancel Operation"
        read -p "Enter number to edit, or 11 to continue: " EDIT_CHOICE

        case "$EDIT_CHOICE" in
            1)
                read -p "First Name: " FIRST_RAW
                FIRST_NAME=$(sanitize_path_component "$(to_title_case "$(trim "$FIRST_RAW")")")
                read -p "Last Name: " LAST_RAW
                LAST_NAME=$(sanitize_path_component "$(to_title_case "$(trim "$LAST_RAW")")")
                LAST_FIRST="${LAST_NAME}_${FIRST_NAME}"
                LAST="$LAST_NAME"
                ;;
            2)
                echo "1) State"; echo "2) Federal"; echo "3) Civil"; echo "4) Postconviction"
                read -p "Enter new case type number: " n
                case "$n" in
                    1) CASE_TYPE="State" ;;
                    2) CASE_TYPE="Federal" ;;
                    3) CASE_TYPE="Civil" ;;
                    4) CASE_TYPE="Postconviction" ;;
                    *) echo "Invalid";;
                esac
                ;;
            3)
                echo "1) PDR"; echo "2) Habeas"; echo "3) Direct Appeal"; echo "4) Expunction"; echo "5) Nondisclosure"
                read -p "Enter new subtype number: " n
                case "$n" in
                    1) SUBTYPE="PDR" ;;
                    2) SUBTYPE="Habeas" ;;
                    3) SUBTYPE="Direct Appeal" ;;
                    4) SUBTYPE="Expunction" ;;
                    5) SUBTYPE="Nondisclosure" ;;
                    *) echo "Invalid";;
                esac
                ;;
            4)
                read -p "New Court: " COURT_RAW
                COURT_TRIMMED=$(trim "$COURT_RAW")
                if [[ "$CASE_TYPE" == "Federal" ]]; then
                    COURT=$(sanitize_path_component "$(echo "$COURT_TRIMMED" | tr '[:lower:]' '[:upper:]')")
                else
                    COURT=$(sanitize_path_component "$(to_title_case "$COURT_TRIMMED")")
                fi
                ;;
            5)
                read -p "New County: " COUNTY_RAW
                COUNTY=$(sanitize_path_component "$(to_title_case "$(trim "$COUNTY_RAW")")")
                ;;
            6)
                read -p "Party: " PARTY
                ;;
            7)
                read -p "Offense: " OFFENSE_RAW
                OFFENSE=$(sanitize_path_component "$(to_title_case "$(trim "$OFFENSE_RAW")")")
                ;;
            8)
                read -p "Cause Number: " CAUSE_NO_RAW
                CAUSE_NO=$(sanitize_path_component "$(trim "$CAUSE_NO_RAW")")
                ;;
            9)
                read -p "Date of Incident [MMDDYYYY]: " DATE
                # Improved MMDDYYYY format check:
                if [[ ! "$DATE" =~ ^(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])[0-9]{4}$ ]]; then
                    echo "❌ Error: Date must be valid MMDDYYYY (e.g., 05312025)."
                    continue
                fi
                ;;
            10)
                echo "Folder path is auto-generated. Rebuild by editing inputs above."
                ;;
            11)
                break
                ;;
            0)
                echo "❌ Operation cancelled."
                exit 1
                ;;
            *)
                echo "❌ Error: Invalid choice"
                ;;
        esac

        # Recalculate folder path after any edits
        SUBTYPE_RAW_LOWER=$(echo "${SUBTYPE:-none}" | tr '[:upper:]' '[:lower:]')
        if [[ "$CASE_TYPE" == "Postconviction" && "$SUBTYPE_RAW_LOWER" != "none" ]]; then
            BASE_PATH="$BASE_DIR/Postconviction/$SUBTYPE"
            if [[ "$SUBTYPE" == "Direct Appeal" ]]; then
                CASE_PATH="$BASE_PATH/${LAST_FIRST} Appeal ${COURT}/${OFFENSE} ${CAUSE_NO} ${DATE}"
            else
                CASE_PATH="$BASE_PATH/${LAST_FIRST} ${SUBTYPE} ${COURT}/${OFFENSE} ${CAUSE_NO} ${DATE}"
            fi
        elif [[ "$CASE_TYPE" == "Federal" ]]; then
            BASE_PATH="$BASE_DIR/Federal/${LAST_FIRST} ${COURT}"
            CASE_PATH="$BASE_PATH/${OFFENSE} ${CAUSE_NO} ${DATE}"
        elif [[ "$CASE_TYPE" == "Civil" ]]; then
            BASE_PATH="$BASE_DIR/Civil"
            CASE_PATH="$BASE_PATH/${LAST_FIRST} ${OFFENSE} ${DATE}"
        else
            BASE_PATH="$BASE_DIR/$CASE_TYPE"
            CASE_PATH="$BASE_PATH/${LAST_FIRST} ${COURT}/${OFFENSE} ${CAUSE_NO} ${DATE}"
        fi
    done
}       

echo ""
echo "╔══════════════════════════════════╗"
echo "║            Case Type             ║"
echo "╚══════════════════════════════════╝"
echo "1) State"
echo "2) Federal"
echo "3) Civil"
echo "4) Postconviction"

read -p "ℹ️  Enter corresponding number for case type: " CASE_TYPE_NUM
case "$CASE_TYPE_NUM" in
    1) CASE_TYPE="State" ;;
    2) CASE_TYPE="Federal" ;;
    3) CASE_TYPE="Civil" ;;
    4) CASE_TYPE="Postconviction" ;;
    *) echo "❌ INVALID SELECTION" && exit 1 ;;
esac

# Select Subtype if Postconviction
SUBTYPE=""
if [[ "$CASE_TYPE" == "Postconviction" ]]; then
    echo "╔══════════════════════════════════╗"
    echo "║       Postconviction Type        ║"
    echo "╚══════════════════════════════════╝"
    echo ""
    echo "1) PDR"
    echo "2) Habeas"
    echo "3) Direct Appeal"
    echo "4) Expunction"
    echo "5) Nondisclosure"
    read -p "ℹ️  Enter number: " SUBTYPE_NUM
    case "$SUBTYPE_NUM" in
        1) SUBTYPE="PDR" ;;
        2) SUBTYPE="Habeas" ;;
        3) SUBTYPE="Direct Appeal" ;;
        4) SUBTYPE="Expunction" ;;
        5) SUBTYPE="Nondisclosure" ;;
        *) echo "❌ INVALID SELECTION" && exit 1 ;;
    esac
fi

echo ""
echo "╔══════════════════════════════════╗"
echo "║            Client Name           ║"
echo "╚══════════════════════════════════╝"

while true; do
    read -p "Client's First Name: " FIRST_RAW
    FIRST_NAME=$(sanitize_path_component "$(to_title_case "$(trim "$FIRST_RAW")")")
    if [[ -z "$FIRST_NAME" ]]; then
        echo "❌ First name cannot be empty."
    else
        break
    fi
done

while true; do
    read -p "Client's Last Name: " LAST_RAW
    LAST_NAME=$(sanitize_path_component "$(to_title_case "$(trim "$LAST_RAW")")")
    if [[ -z "$LAST_NAME" ]]; then
        echo "❌ Last name cannot be empty."
    else
        break
    fi
done

LAST_FIRST="${LAST_NAME}_${FIRST_NAME}"
LAST="$LAST_NAME"

echo "╔══════════════════════════════════╗"
echo "║        Court Information         ║"
echo "╚══════════════════════════════════╝"

if [[ "${SUBTYPE^^}" != "PDR" ]]; then
    while true; do
        read -p "Court: " COURT_RAW
        COURT_TRIMMED=$(trim "$COURT_RAW")
        if [[ -n "$COURT_TRIMMED" ]]; then
            if [[ "$CASE_TYPE" == "Federal" ]]; then
                COURT=$(sanitize_path_component "$(echo "$COURT_TRIMMED" | tr '[:lower:]' '[:upper:]')")
            else
                COURT=$(sanitize_path_component "$(to_title_case "$COURT_TRIMMED")")
            fi
            break
        else
            echo "❌ Court name cannot be empty. Please enter a valid court name."
        fi
    done
else
    COURT=""
fi

echo "╔══════════════════════════════════╗"
echo "║          Case Details            ║"
echo "╚══════════════════════════════════╝"

while true; do
    read -p "Offense/Cause of Action: " OFFENSE_RAW
    OFFENSE=$(sanitize_path_component "$(to_title_case "$(trim "$OFFENSE_RAW")")")
    if [[ -z "$OFFENSE" ]]; then
        echo "❌ Error: Offense/Cause of Action cannot be empty."
    else
        break
    fi
done

while true; do
    read -p "Cause number: " CAUSE_NO_RAW
    CAUSE_NO=$(sanitize_path_component "$(trim "$CAUSE_NO_RAW")")
    if [[ -z "$CAUSE_NO" ]]; then
        echo "❌ Error: Cause number cannot be empty."
    else
        break
    fi
done

while true; do
    read -p "Date of the incident [MMDDYYYY]: " DATE
    # Improved MMDDYYYY format check:
    if [[ ! "$DATE" =~ ^(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])[0-9]{4}$ ]]; then
        echo "❌ Error: Date must be valid MMDDYYYY (e.g., 05312025)."
    else
        break
    fi
done

# Assign PARTY automatically
if [[ "$CASE_TYPE" == "Civil" ]]; then
    PARTY="Defendant"
elif [[ "$CASE_TYPE" == "Postconviction" ]]; then
    read -p "Is this case Ex parte? [y/N]: " IS_EX_PARTE
    if [[ "${IS_EX_PARTE,,}" == "y" ]]; then
        PARTY="Ex parte"
    else
        PARTY="State"
    fi
else
    PARTY="State"
fi

# If State or Civil, prompt for county and modify COURT
if [[ "$CASE_TYPE" == "State" || "$CASE_TYPE" == "Civil" ]]; then
    while true; do
        read -p "Enter county: " COUNTY_RAW
        COUNTY=$(sanitize_path_component "$(to_title_case "$(trim "$COUNTY_RAW")")")
        COUNTY_LOWER=$(echo "$COUNTY" | tr '[:upper:]' '[:lower:]')
        if [[ -z "$COUNTY" ]]; then
            echo "❌ Error: County cannot be empty."
        else
            break
        fi
    done
    if [[ "$COUNTY_LOWER" != "harris" ]]; then
        COURT="$(echo "$COURT $COUNTY" | sed 's/^ *//')"
    fi
fi

# Normalize subtype for logic
SUBTYPE_RAW_LOWER=$(echo "${SUBTYPE:-none}" | tr '[:upper:]' '[:lower:]')

#===============================================================================
# Path Generation Functions
#===============================================================================

build_case_path() {
    local subtype_lower=$(echo "${SUBTYPE:-none}" | tr '[:upper:]' '[:lower:]')
    if [[ "$CASE_TYPE" == "Postconviction" && "$subtype_lower" != "none" ]]; then
        BASE_PATH="$BASE_DIR/Postconviction/$SUBTYPE"
        if [[ "$SUBTYPE" == "Direct Appeal" ]]; then
            CASE_PATH="$BASE_PATH/${LAST_FIRST} Appeal ${COURT}/${OFFENSE} ${CAUSE_NO} ${DATE}"
        else
            CASE_PATH="$BASE_PATH/${LAST_FIRST} ${SUBTYPE} ${COURT}/${OFFENSE} ${CAUSE_NO} ${DATE}"
        fi
    elif [[ "$CASE_TYPE" == "Federal" ]]; then
        BASE_PATH="$BASE_DIR/Federal/${LAST_FIRST} ${COURT}"
        CASE_PATH="$BASE_PATH/${OFFENSE} ${CAUSE_NO} ${DATE}"
    elif [[ "$CASE_TYPE" == "Civil" ]]; then
        BASE_PATH="$BASE_DIR/Civil/${LAST_FIRST} ${COURT}"
        CASE_PATH="$BASE_PATH/${LAST_FIRST} ${OFFENSE} ${DATE}"
    else
        BASE_PATH="$BASE_DIR/State/${LAST_FIRST} ${COURT}"
        CASE_PATH="$BASE_PATH/${LAST_FIRST} ${OFFENSE} ${DATE}"
    fi
}

#===============================================================================
# Edit Functions
#===============================================================================

edit_field() {
    local field_num="$1"
    case "$field_num" in
        1)
            read -p "First Name: " first_raw
            FIRST_NAME=$(sanitize_path_component "$(to_title_case "$(trim "$first_raw")")")
            read -p "Last Name: " last_raw
            LAST_NAME=$(sanitize_path_component "$(to_title_case "$(trim "$last_raw")")")
            LAST_FIRST="${LAST_NAME}_${FIRST_NAME}"
            LAST="$LAST_NAME"
            ;;
        2) get_case_type ;;
        3) get_postconviction_subtype ;;
        4)
            read -p "New Court: " court_raw
            local court_trimmed=$(trim "$court_raw")
            if [[ "$CASE_TYPE" == "Federal" ]]; then
                COURT=$(sanitize_path_component "$(echo "$court_trimmed" | tr '[:lower:]' '[:upper:]')")
            else
                COURT=$(sanitize_path_component "$(to_title_case "$court_trimmed")")
            fi
            ;;
        5)
            read -p "New County: " county_raw
            COUNTY=$(sanitize_path_component "$(to_title_case "$(trim "$county_raw")")")
            ;;
        6) read -p "Party: " PARTY ;;
        7)
            read -p "Offense: " offense_raw
            OFFENSE=$(sanitize_path_component "$(to_title_case "$(trim "$offense_raw")")")
            ;;
        8)
            read -p "Cause Number: " cause_no_raw
            CAUSE_NO=$(sanitize_path_component "$(trim "$cause_no_raw")")
            ;;
        9)
            while true; do
                read -p "Date of Incident [MMDDYYYY]: " date_input
                if validate_date "$date_input"; then
                    DATE="$date_input"
                    break
                else
                    error "Date must be valid MMDDYYYY format (e.g., 05312025)."
                fi
            done
            ;;
        *)
            error "Invalid field number"
            return 1
            ;;
    esac
    build_case_path
}

edit_inputs() {
    while true; do
        echo ""
        echo "╔══════════════════════════════════╗"
        echo "║        Confirm/Edit Fields       ║"
        echo "╚══════════════════════════════════╝"
        echo "1) Client Name:      $FIRST_NAME $LAST_NAME"
        echo "2) Case Type:        $CASE_TYPE"
        [[ -n "$SUBTYPE" ]] && echo "3) Subtype:          $SUBTYPE"
        [[ -n "$COURT" ]] && echo "4) Court:            $COURT"
        [[ -n "$COUNTY" ]] && echo "5) County:           $COUNTY"
        echo "6) Party:            $PARTY"
        echo "7) Offense:          $OFFENSE"
        echo "8) Cause Number:     $CAUSE_NO"
        echo "9) Incident Date:    $DATE"
        echo "10) Folder Path:     $CASE_PATH"
        echo "11) Continue and Create Folders"
        echo "0) Cancel Operation"
        read -p "Enter number to edit, or 11 to continue: " EDIT_CHOICE

        case "$EDIT_CHOICE" in
            1)
                read -p "First Name: " FIRST_RAW
                FIRST_NAME=$(sanitize_path_component "$(to_title_case "$(trim "$FIRST_RAW")")")
                read -p "Last Name: " LAST_RAW
                LAST_NAME=$(sanitize_path_component "$(to_title_case "$(trim "$LAST_RAW")")")
                LAST_FIRST="${LAST_NAME}_${FIRST_NAME}"
                LAST="$LAST_NAME"
                ;;
            2)
                echo "1) State"; echo "2) Federal"; echo "3) Civil"; echo "4) Postconviction"
                read -p "Enter new case type number: " n
                case "$n" in
                    1) CASE_TYPE="State" ;;
                    2) CASE_TYPE="Federal" ;;
                    3) CASE_TYPE="Civil" ;;
                    4) CASE_TYPE="Postconviction" ;;
                    *) echo "Invalid";;
                esac
                ;;
            3)
                echo "1) PDR"; echo "2) Habeas"; echo "3) Direct Appeal"; echo "4) Expunction"; echo "5) Nondisclosure"
                read -p "Enter new subtype number: " n
                case "$n" in
                    1) SUBTYPE="PDR" ;;
                    2) SUBTYPE="Habeas" ;;
                    3) SUBTYPE="Direct Appeal" ;;
                    4) SUBTYPE="Expunction" ;;
                    5) SUBTYPE="Nondisclosure" ;;
                    *) echo "Invalid";;
                esac
                ;;
            4)
                read -p "New Court: " COURT_RAW
                COURT_TRIMMED=$(trim "$COURT_RAW")
                if [[ "$CASE_TYPE" == "Federal" ]]; then
                    COURT=$(sanitize_path_component "$(echo "$COURT_TRIMMED" | tr '[:lower:]' '[:upper:]')")
                else
                    COURT=$(sanitize_path_component "$(to_title_case "$COURT_TRIMMED")")
                fi
                ;;
            5)
                read -p "New County: " COUNTY_RAW
                COUNTY=$(sanitize_path_component "$(to_title_case "$(trim "$COUNTY_RAW")")")
                ;;
            6)
                read -p "Party: " PARTY
                ;;
            7)
                read -p "Offense: " OFFENSE_RAW
                OFFENSE=$(sanitize_path_component "$(to_title_case "$(trim "$OFFENSE_RAW")")")
                ;;
            8)
                read -p "Cause Number: " CAUSE_NO_RAW
                CAUSE_NO=$(sanitize_path_component "$(trim "$CAUSE_NO_RAW")")
                ;;
            9)
                read -p "Date of Incident [MMDDYYYY]: " DATE
                # Improved MMDDYYYY format check:
                if [[ ! "$DATE" =~ ^(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])[0-9]{4}$ ]]; then
                    echo "❌ Error: Date must be valid MMDDYYYY (e.g., 05312025)."
                    continue
                fi
                ;;
            10)
                echo "Folder path is auto-generated. Rebuild by editing inputs above."
                ;;
            11)
                break
                ;;
            0)
                echo "❌ Operation cancelled."
                exit 1
                ;;
            *)
                echo "❌ Error: Invalid choice"
                ;;
        esac

        # Recalculate folder path after any edits
        SUBTYPE_RAW_LOWER=$(echo "${SUBTYPE:-none}" | tr '[:upper:]' '[:lower:]')
        if [[ "$CASE_TYPE" == "Postconviction" && "$SUBTYPE_RAW_LOWER" != "none" ]]; then
            BASE_PATH="$BASE_DIR/Postconviction/$SUBTYPE"
            if [[ "$SUBTYPE" == "Direct Appeal" ]]; then
                CASE_PATH="$BASE_PATH/${LAST_FIRST} Appeal ${COURT}/${OFFENSE} ${CAUSE_NO} ${DATE}"
            else
                CASE_PATH="$BASE_PATH/${LAST_FIRST} ${SUBTYPE} ${COURT}/${OFFENSE} ${CAUSE_NO} ${DATE}"
            fi
        elif [[ "$CASE_TYPE" == "Federal" ]]; then
            BASE_PATH="$BASE_DIR/Federal/${LAST_FIRST} ${COURT}"
            CASE_PATH="$BASE_PATH/${OFFENSE} ${CAUSE_NO} ${DATE}"
        elif [[ "$CASE_TYPE" == "Civil" ]]; then
            BASE_PATH="$BASE_DIR/Civil"
            CASE_PATH="$BASE_PATH/${LAST_FIRST} ${OFFENSE} ${DATE}"
        else
            BASE_PATH="$BASE_DIR/$CASE_TYPE"
            CASE_PATH="$BASE_PATH/${LAST_FIRST} ${COURT}/${OFFENSE} ${CAUSE_NO} ${DATE}"
        fi
    done
}

#===============================================================================
# Folder Generation Functions
#===============================================================================

create_core_structure() {
    # Correspondence path logic - matches template
    local correspondence_path
    if [[ "$CASE_TYPE" == "Postconviction" ]]; then
        correspondence_path="$(dirname "$CASE_PATH")/${LAST} Correspondence"
    else
        correspondence_path="$BASE_PATH/${LAST} Correspondence"
    fi

    local -a core_dirs=(
        "$CASE_PATH/${LAST_FIRST} Contract/Drafts"
        "$CASE_PATH/${LAST_FIRST} Pleadings & Filings/${LAST_FIRST} Briefs/Drafts"
        "$CASE_PATH/${LAST_FIRST} Pleadings & Filings/$PARTY Filings"
        "$CASE_PATH/${LAST_FIRST} Pleadings & Filings/${LAST} Motions/Drafts"
        "$CASE_PATH/${LAST_FIRST} Pleadings & Filings/${LAST} Notices/Drafts"
        "$CASE_PATH/${LAST_FIRST} Pleadings & Filings/${LAST} Orders"
        "$correspondence_path"
        "$CASE_PATH/${LAST} Research/Caselaw"
        "$CASE_PATH/${LAST} Research/Secondary Sources"
        "$CASE_PATH/${LAST} Research/Statutes"
    )

    # Add Record on Appeal for Postconviction cases (except PDR)
    if [[ "$CASE_TYPE" == "Postconviction" && "${SUBTYPE^^}" != "PDR" ]]; then
        core_dirs+=(
            "$CASE_PATH/${LAST_FIRST} Record on Appeal/${LAST} Clerks Record"
            "$CASE_PATH/${LAST_FIRST} Record on Appeal/${LAST} Reporters Record"
        )
    fi

    for dir in "${core_dirs[@]}"; do
        if ! create_directory "$dir" "core directory"; then return 1; fi
    done
    return 0
}

add_investigation_folder() {
    read -p "Add 'Investigation' folder? [y/N]: " add_investigation
    if [[ "${add_investigation,,}" == "y" ]]; then
        if create_directory "$CASE_PATH/${LAST_FIRST} Investigation" "Investigation folder"; then
            success "Investigation folder added!"
        else
            return 1
        fi
    else
        info "Investigation folder skipped."
    fi
    return 0
}

add_client_documents_folder() {
    read -p "Add 'Client Documents' folder? [y/N]: " add_client_docs
    if [[ "${add_client_docs,,}" != "y" ]]; then
        info "Client Documents folder skipped."
        return 0
    fi
    local client_docs_path="$CASE_PATH/${LAST_FIRST} Client Documents"
    if ! create_directory "$client_docs_path" "Client Documents folder"; then return 1; fi
    success "Client Documents folder added!"
    echo "Select Client Document subfolders to add (select one at a time, or 'Done' to finish):"
    PS3="➡️  Choose a number or type Enter for 'Done': "
    local -a options=(
        "$LAST Civil Litigation"
        "$LAST Criminal History"
        "$LAST Education Records"
        "$LAST Emails"
        "$LAST Employment Records"
        "$LAST Letters of Support"
        "$LAST Mental Health Records"
        "$LAST Notes"
        "$LAST Photos"
        "$LAST Prior Court Records"
        "$LAST Rehab Records"
        "$LAST Screenshots"
        "$LAST Timeline of Events"
        "$LAST Warrants"
        "Done"
    )
    select opt in "${options[@]}"; do
        [[ "$opt" == "Done" ]] && break
        [[ -z "$opt" ]] && continue
        if create_directory "$client_docs_path/$opt" "subfolder"; then
            success "$opt added!"
            case "$opt" in
                "$LAST Criminal History")
                    local -a crim_dirs=(
                        "$client_docs_path/$opt/$LAST Convictions/Felony"
                        "$client_docs_path/$opt/$LAST Convictions/Misdemeanor"
                        "$client_docs_path/$opt/$LAST Deferred Adjudication"
                        "$client_docs_path/$opt/$LAST Probation"
                        "$client_docs_path/$opt/Jail Records"
                    )
                    for dir in "${crim_dirs[@]}"; do create_directory "$dir" "criminal history subfolder"; done ;;
                "$LAST Employment Records")
                    local -a emp_dirs=(
                        "$client_docs_path/$opt/Pay Stubs"
                        "$client_docs_path/$opt/Schedules or Time Cards"
                        "$client_docs_path/$opt/Tax forms"
                    )
                    for dir in "${emp_dirs[@]}"; do create_directory "$dir" "employment records subfolder"; done ;;
                "$LAST Mental Health Records")
                    local -a mh_dirs=(
                        "$client_docs_path/$opt/Psych Evaluations"
                        "$client_docs_path/$opt/Verification of Mental Health Disorder"
                    )
                    for dir in "${mh_dirs[@]}"; do create_directory "$dir" "mental health records subfolder"; done ;;
                "$LAST Prior Court Records")
                    local -a court_dirs=(
                        "$client_docs_path/$opt/$LAST Court Correspondence"
                        "$client_docs_path/$opt/$LAST Discovery"
                        "$client_docs_path/$opt/$LAST Exhibits/Defense"
                        "$client_docs_path/$opt/$LAST Exhibits/Govt"
                        "$client_docs_path/$opt/$LAST Indictment"
                        "$client_docs_path/$opt/$LAST Jury/$LAST Jury Charge"
                        "$client_docs_path/$opt/$LAST Limine 404"
                        "$client_docs_path/$opt/$LAST Mitigation"
                        "$client_docs_path/$opt/$LAST Motions/Defense"
                        "$client_docs_path/$opt/$LAST Motions/Govt"
                        "$client_docs_path/$opt/$LAST Other Govt Filings"
                        "$client_docs_path/$opt/$LAST Sentencing"
                        "$client_docs_path/$opt/$LAST Subpoenas/Defense"
                        "$client_docs_path/$opt/$LAST Subpoenas/Govt"
                    )
                    for dir in "${court_dirs[@]}"; do create_directory "$dir" "prior court records subfolder"; done ;;
                "$LAST Rehab Records")
                    local -a rehab_dirs=(
                        "$client_docs_path/$opt/Attendance Logs"
                        "$client_docs_path/$opt/Proof of Completion"
                        "$client_docs_path/$opt/Staff Recommendations"
                    )
                    for dir in "${rehab_dirs[@]}"; do create_directory "$dir" "rehab records subfolder"; done ;;
            esac
        fi
    done
    unset PS3
    return 0
}

add_discovery_folder() {
    if [[ "$CASE_TYPE" == "Postconviction" ]]; then return 0; fi
    read -p "Add 'Discovery' folder? [y/N]: " add_discovery
    if [[ "${add_discovery,,}" != "y" ]]; then info "Discovery folder skipped."; return 0; fi
    local disc_path="$CASE_PATH/${LAST_FIRST} Discovery"
    if ! create_directory "$disc_path" "Discovery folder"; then return 1; fi
    success "Discovery folder added!"
    echo "Select Discovery subfolders to add (select one at a time, or 'Done' to finish):"
    PS3="➡️  Choose a number or type Enter for 'Done': "
    local -a options=(
        "Bodycam & Video"
        "Brady Material"
        "Crime Scene Photos"
        "Defense Investigation Records"
        "Discovery Logs & Indexes"
        "Documents Exchanged"
        "Forensic Reports"
        "Jail Phone Records"
        "Medical Records"
        "Police Reports"
        "Search Warrants"
        "Supplemental Disclosures"
        "Witness Statements"
        "Done"
    )
    select opt in "${options[@]}"; do
        [[ "$opt" == "Done" ]] && break
        [[ -n "$opt" ]] && create_directory "$disc_path/$opt" "discovery subfolder" && success "$opt added!"
    done
    unset PS3
    return 0
}

generate_structure() {
    # Create folder structure
    mkdir -p "$CASE_PATH/${LAST_FIRST} Contract/Drafts"
    mkdir -p "$CASE_PATH/${LAST_FIRST} Pleadings & Filings/${LAST_FIRST} Briefs/Drafts"
    mkdir -p "$CASE_PATH/${LAST_FIRST} Pleadings & Filings/$PARTY Filings"
    mkdir -p "$CASE_PATH/${LAST_FIRST} Pleadings & Filings/${LAST} Motions/Drafts"
    mkdir -p "$CASE_PATH/${LAST_FIRST} Pleadings & Filings/${LAST} Notices/Drafts"
    mkdir -p "$CASE_PATH/${LAST_FIRST} Pleadings & Filings/${LAST} Orders"
    mkdir -p "$BASE_PATH/${LAST} Correspondence"
    mkdir -p "$CASE_PATH/${LAST} Research/Caselaw"
    mkdir -p "$CASE_PATH/${LAST} Research/Secondary Sources"
    mkdir -p "$CASE_PATH/${LAST} Research/Statutes"

    # Optional Record on Appeal (except PDR)
    if [[ "${CASE_TYPE}" == "Postconviction" && "${SUBTYPE^^}" != "PDR" ]]; then
        mkdir -p "$CASE_PATH/${LAST_FIRST} Record on Appeal/${LAST} Clerks Record"
        mkdir -p "$CASE_PATH/${LAST_FIRST} Record on Appeal/${LAST} Reporters Record"
    fi

    echo ""
    echo "╔══════════════════════════════════╗"
    echo "║         Optional Folders        ║"
    echo "╚══════════════════════════════════╝"

    # Optional folders
    read -p "Add 'Investigation' folder? [y/N]: " ADD_INVESTIGATION
    if [[ "${ADD_INVESTIGATION,,}" == "y" ]]; then
        mkdir -p "$CASE_PATH/${LAST_FIRST} Investigation"
        echo "✅ Investigation folder added!"
    else
        echo "ℹ️ Investigation folder skipped."
    fi

    read -p "Add 'Client Documents' folder? [y/N]: " ADD_CLIENT_DOCS
    if [[ "${ADD_CLIENT_DOCS,,}" == "y" ]]; then
        CLIENT_DOCS_PATH="$CASE_PATH/${LAST_FIRST} Client Documents"
        mkdir -p "$CLIENT_DOCS_PATH"
        echo "✅ Client Documents folder added!"

        echo "Select Client Document subfolders to add (select one at a time, or 'Done' to finish):"
        PS3="➡️  Choose a number or type Enter for 'Done': "
        OPTIONS=(
            "$LAST Civil Litigation"
            "$LAST Criminal History"
            "$LAST Education Records"
            "$LAST Emails"
            "$LAST Employment Records"
            "$LAST Letters of Support"
            "$LAST Mental Health Records"
            "$LAST Notes"
            "$LAST Photos"
            "$LAST Prior Court Records"
            "$LAST Rehab Records"
            "$LAST Screenshots"
            "$LAST Timeline of Events"
            "$LAST Warrants"
            "Done"
        )

        select opt in "${OPTIONS[@]}"; do
            [[ $opt == "Done" ]] && break
            mkdir -p "$CLIENT_DOCS_PATH/$opt" && echo "✅ $opt added!"

            # Nested folders — triggered only if main parent is selected
            if [[ "$opt" == "$LAST Criminal History" ]]; then
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Convictions/Felony"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Convictions/Misdemeanor"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Deferred Adjudication"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Probation"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/Jail Records"
            elif [[ "$opt" == "$LAST Employment Records" ]]; then
                mkdir -p "$CLIENT_DOCS_PATH/$opt/Pay Stubs"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/Schedules or Time Cards"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/Tax forms"
            elif [[ "$opt" == "$LAST Mental Health Records" ]]; then
                mkdir -p "$CLIENT_DOCS_PATH/$opt/Psych Evaluations"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/Verification of Mental Health Disorder"
            elif [[ "$opt" == "$LAST Prior Court Records" ]]; then
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Court Correspondence"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Discovery"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Exhibits/Defense"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Exhibits/Govt"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Indictment"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Jury/$LAST Jury Charge"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Limine 404"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Mitigation"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Motions/Defense"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Motions/Govt"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Other Govt Filings"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Sentencing"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Subpoenas/Defense"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/$LAST Subpoenas/Govt"
            elif [[ "$opt" == "$LAST Rehab Records" ]]; then
                mkdir -p "$CLIENT_DOCS_PATH/$opt/Attendance Logs"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/Proof of Completion"
                mkdir -p "$CLIENT_DOCS_PATH/$opt/Staff Recommendations"
            fi
        done
        unset PS3
    else
        echo "ℹ️ Client Documents folder skipped."
    fi

    if [[ "$CASE_TYPE" != "Postconviction" ]]; then
        read -p "Add 'Discovery' folder? [y/N]: " ADD_DISCOVERY
        if [[ "${ADD_DISCOVERY,,}" == "y" ]]; then
            DISC_PATH="$CASE_PATH/${LAST_FIRST} Discovery"
            mkdir -p "$DISC_PATH"
            echo "✅ Discovery folder added!"

            echo "Select Discovery subfolders to add (select one at a time, or 'Done' to finish):"
            PS3="➡️  Choose a number or type Enter for 'Done': "
            OPTIONS=(
                "Bodycam & Video"
                "Brady Material"
                "Crime Scene Photos"
                "Defense Investigation Records"
                "Discovery Logs & Indexes"
                "Documents Exchanged"
                "Forensic Reports"
                "Jail Phone Records"
                "Medical Records"
                "Police Reports"
                "Search Warrants"
                "Supplemental Disclosures"
                "Witness Statements"
                "Done"
            )

            select opt in "${OPTIONS[@]}"; do
                [[ $opt == "Done" ]] && break
                [[ -n "$opt" ]] && mkdir -p "$DISC_PATH/$opt" && echo "✅ $opt added!"
            done
            unset PS3
        else
            echo "ℹ️ Discovery folder skipped."
        fi
    fi
}

#===============================================================================
# Main Script Logic
#===============================================================================

show_header() {
    echo ""
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║            Legal Case Folder Generator v$SCRIPT_VERSION             ║"
    echo "║                                                              ║"
    echo "║  Creates organized folder structures for legal cases        ║"
    echo "║  Supports: State, Federal, Civil, and Postconviction cases  ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
}

validate_prerequisites() {
    if [[ ! -d "$BASE_DIR" ]]; then
        warning "Base directory doesn't exist: $BASE_DIR"
        read -p "Create base directory? [Y/n]: " create_base
        if [[ "${create_base,,}" != "n" ]]; then
            if ! create_directory "$BASE_DIR" "base directory"; then
                error "Cannot create base directory. Exiting."
                exit 1
            fi
            success "Base directory created: $BASE_DIR"
        else
            error "Base directory required. Exiting."
            exit 1
        fi
    fi
    if [[ ! -w "$BASE_DIR" ]]; then
        error "No write permission for base directory: $BASE_DIR"
        exit 1
    fi
}

main() {
    show_header
    validate_prerequisites
    get_case_type
    if [[ "$CASE_TYPE" == "Postconviction" ]]; then get_postconviction_subtype; fi
    get_client_name
    get_court_info
    get_case_details
    determine_party
    get_county_info
    build_case_path
    echo ""
    echo "╔══════════════════════════════════╗"
    echo "║        Folder Path Preview       ║"
    echo "╚══════════════════════════════════╝"
    echo "📁 $CASE_PATH"
    edit_inputs
    case $(check_directory_conflict "$CASE_PATH") in
        1) error "Operation cancelled due to directory conflict."; exit 1 ;;
        2) warning "Please restart the script to choose a different path."; exit 1 ;;
        0) ;;
    esac
    echo ""
    echo "╔══════════════════════════════════╗"
    echo "║          Setup Complete          ║"
    echo "╚══════════════════════════════════╝"
    read -p "Proceed with folder creation? [Y/n]: " confirm
    if [[ "${confirm,,}" != "n" ]]; then
        if generate_structure; then
            echo ""
            success "A new client folder structure was created at: $CASE_PATH"
        else
            error "Folder creation failed."
        fi
    else
        warning "Operation cancelled by user."
    fi
}

main "$@"
